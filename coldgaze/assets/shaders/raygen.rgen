#version 460
#extension GL_NV_ray_tracing : require

struct RayPayload
{
	vec4 radianceAndDistance; // rgb + t
	vec4 scatterDirection;
    vec4 ambient;
	uint randomSeed;
};

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform UBOScene
{
	mat4 projection;
	mat4 model;
	mat4 view;
    vec4 cameraPos;
    
    mat4 invProjection;
	mat4 invView;
    
    vec4 globalLightDir;
    vec4 globalLightColor;
} uboScene;

layout(location = 0) rayPayloadNV RayPayload rayPayload;

const uint bouncesCount = 5;

vec3 Uncharted2Tonemap(vec3 color)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	float W = 11.2;
	return ((color*(A*color+C*B)+D*E)/(color*(A*color+B)+D*F))-E/F;
}

vec4 Tonemap(vec4 color)
{
    // TODO: move to uniforms 
    float gamma = 2.2f;
    float exposure = 4.5f;

	vec3 outcol = Uncharted2Tonemap(color.rgb * exposure);
	outcol = outcol * (1.0f / Uncharted2Tonemap(vec3(11.2f)));	
	return vec4(pow(outcol, vec3(1.0f / gamma)), color.a);
}

void main() 
{
    vec2 coords[1];
    coords[0] = vec2(0.5, 0.5);
    
    vec3 resultColor = vec3(0.0);
    
    for (uint i = 0; i < 1; ++i)
    {
        const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + coords[i];
        const vec2 inUV = pixelCenter / vec2(gl_LaunchSizeNV.xy);
        vec2 d = inUV * 2.0 - 1.0;

        vec4 origin = uboScene.invView * vec4(0,0,0,1);
        vec4 target = uboScene.invProjection * vec4(d.x, d.y, 1, 1);
        vec4 direction = uboScene.invView * vec4(normalize(target.xyz), 0);
        
        uint rayFlags = gl_RayFlagsOpaqueNV;
        uint cullMask = 0xff;
        float tmin = 0.001;
        float tmax = 10000.0;
    
        vec3 radianceColor = vec3(1.0);
        vec3 ambientColor = vec3(0.0);
        
        for (uint b = 0; b < bouncesCount; ++b)
        {
            traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);
            
            const vec3 hitColor = rayPayload.radianceAndDistance.rgb;
            const float t = rayPayload.radianceAndDistance.a;
            
            radianceColor *= hitColor;
            
            if (b == 0)
            {
                ambientColor = rayPayload.ambient.rgb;
            }
            
            // Trace missed, or end of trace.
            if (t < 0.0 || rayPayload.scatterDirection.w == 0.0)
            {				
                break;
            }

            // Trace hit.
            origin = origin + t * direction;
            direction = vec4(rayPayload.scatterDirection.xyz, 0);
        }
        
        resultColor += radianceColor;
    }
    
    
    resultColor = Tonemap(vec4(resultColor / 4, 0.0)).rgb;
    
    ivec2 storePos = ivec2(gl_LaunchIDNV.x, gl_LaunchSizeNV.y - gl_LaunchIDNV.y);
	imageStore(image, storePos, vec4(resultColor, 0.0));
}
